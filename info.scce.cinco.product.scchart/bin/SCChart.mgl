id info.scce.cinco.product.scchart.mglid
stylePath "model/SCChart.style"

@event("info.scce.cinco.product.scchart.events.SCChartEvent")
graphModel SCChart {
	diagramExtension "scchart"
	containableElements(RootState[1,1])
}

@palette
@event("info.scce.cinco.product.scchart.events.RootStateEvent")
container RootState {
	style rootStateStyle ("${empty label ? name : label}")
	containableElements(Region,Declaration,Suspend,Action)
	outgoingEdges (*)
	attr EString as name := "<insert name>"
	attr EString as label 
}

@palette("SuperStates")
@event("info.scce.cinco.product.scchart.events.RegionEvent")
container Region {
	style regionStyle ("${empty label ? (empty name ? '' : name) : label}")
	containableElements(SuperState,InitilalSuperState[0,1],InitialState[0,1],SimpleState,FinalState,Connector)
	attr EString as name
	attr EString as label
	@propertiesViewHidden
	attr EString as uuid
}

@palette("Dataflow")
container DataFlowRegion extends Region {
	style regionStyle ("${empty label ? (empty name ? '' : name) : label}")
	containableElements(Input,Output,Operator,CircuitConnecter)
}

@palette("SuperStates")
@event("info.scce.cinco.product.scchart.events.SuperStateEvent")
container SuperState {
	style superStateStyle ("${empty label ? name : label}")
	containableElements(Region,Declaration,Action,Suspend)
	incomingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition,DeferredTransition,ImmediateDeferredTransition,TerminationDefferdTransition,ConditionalTerminationDeferredTransition,StrongAbortDeferredTransition,ImmediateStrongAbortDeferredTransition,HistoryTransition,ImmediateHistoryTransition,TerminationHistoryTransition,ConditionalTerminationHistoryTransition,StrongAbortHistoryTransition,ImmediateStrongAbortHistoryTransition)
	outgoingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition,DeferredTransition,ImmediateDeferredTransition,TerminationDefferdTransition,ConditionalTerminationDeferredTransition,StrongAbortDeferredTransition,ImmediateStrongAbortDeferredTransition,HistoryTransition,ImmediateHistoryTransition,TerminationHistoryTransition,ConditionalTerminationHistoryTransition,StrongAbortHistoryTransition,ImmediateStrongAbortHistoryTransition)
	attr EString as name := "<insert name>"
	attr EString as label
}

@palette("SuperStates")
container InitilalSuperState extends SuperState{
	style initialSuperStateStyle ("${empty label ? name : label}")
	containableElements(Region,Declaration,Action,Suspend)
	incomingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition,DeferredTransition,ImmediateDeferredTransition,TerminationDefferdTransition,ConditionalTerminationDeferredTransition,StrongAbortDeferredTransition,ImmediateStrongAbortDeferredTransition,HistoryTransition,ImmediateHistoryTransition,TerminationHistoryTransition,ConditionalTerminationHistoryTransition,StrongAbortHistoryTransition,ImmediateStrongAbortHistoryTransition)
	outgoingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition,DeferredTransition,ImmediateDeferredTransition,TerminationDefferdTransition,ConditionalTerminationDeferredTransition,StrongAbortDeferredTransition,ImmediateStrongAbortDeferredTransition,HistoryTransition,ImmediateHistoryTransition,TerminationHistoryTransition,ConditionalTerminationHistoryTransition,StrongAbortHistoryTransition,ImmediateStrongAbortHistoryTransition)
}

@palette("SuperStates")
container FinalSuperState extends SuperState{
	style finalSuperStateStyle ("${empty label ? name : label}")
	containableElements(Region,Declaration,Action,Suspend)
	incomingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition,DeferredTransition,ImmediateDeferredTransition,TerminationDefferdTransition,ConditionalTerminationDeferredTransition,StrongAbortDeferredTransition,ImmediateStrongAbortDeferredTransition,HistoryTransition,ImmediateHistoryTransition,TerminationHistoryTransition,ConditionalTerminationHistoryTransition,StrongAbortHistoryTransition,ImmediateStrongAbortHistoryTransition)
	outgoingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition,DeferredTransition,ImmediateDeferredTransition,TerminationDefferdTransition,ConditionalTerminationDeferredTransition,StrongAbortDeferredTransition,ImmediateStrongAbortDeferredTransition,HistoryTransition,ImmediateHistoryTransition,TerminationHistoryTransition,ConditionalTerminationHistoryTransition,StrongAbortHistoryTransition,ImmediateStrongAbortHistoryTransition)
}


@palette("Declaration")
@disable(move,resize)
@event("info.scce.cinco.product.scchart.events.DeclarationEvent")
node Declaration {
	style declarationStyle("${(empty inputOutput || inputOutput == ' ' ? '' : (inputOutput.concat(' '))).concat(empty constant || !constant ? '' : 'const ').concat(empty signal || !signal ? '' : 'signal ').concat(empty declarationType || declarationType == ' ' ? '' : declarationType)}", "${(empty name || name == ' ' ? '' : (name.concat(empty assignment || assignment == ' ' ? '' : (' = '.concat(assignment)))))}")
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.DeclarationInputOutputProvider")
	attr EString as inputOutput := ' '
	attr EBoolean as constant
	attr EBoolean as signal
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.DeclarationTypeProvider")
	attr EString as declarationType := ' '
	attr EString as name
	attr EString as assignment
	@propertiesViewHidden
	attr EString as uuid
}
 
@palette("Declaration")
@disable(move,resize)
@event("info.scce.cinco.product.scchart.events.SuspendEvent")
node Suspend {
	style declarationStyle("${(suspendType)}", "${(suspendType == '<set suspend>' ? ' ' : empty condition ? ' ' : condition)}")
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.SuspendTypeProvider")
	attr EString as suspendType := '<set suspend>'
	attr EString as condition
	@propertiesViewHidden
	attr EString as uuid
}

@palette("Declaration")
@disable(move,resize)
@event("info.scce.cinco.product.scchart.events.ActionEvent")
node Action {
	style declarationStyle("${actionType}", "${(actionType == '<set action>' ? ' ' : empty condition ? '' : condition.concat(empty effect ? '' : ' / '.concat(effect)))}")
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.ActionTypeProvider")
	attr EString as actionType := '<set action>' 
	attr EString as condition
	attr EString as effect
	@propertiesViewHidden
	attr EString as uuid
}

@disable(resize)
@palette("States")
node SimpleState {
	style simpleStateStyle("${empty label ? name : label}")
	incomingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition)
	outgoingEdges (Transition,ImmediateTransition)
	attr EString as name := "<insert name>"
	attr EString as label 
}	

@disable(resize)
@palette("States")
node InitialState extends SimpleState {
	style initialStateStyle("${empty label ? name : label}")
	incomingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition)
	outgoingEdges (Transition,ImmediateTransition)
}							

@disable(resize)
@palette("States")
node FinalState extends SimpleState {
	style finalStateStyle("${empty label ? name : label}")
	incomingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition)
	outgoingEdges (Transition,ImmediateTransition)
}

@disable(resize)
@palette("States")
node Connector {
	style connectorStyle
	incomingEdges (Transition,ImmediateTransition,TerminationTransition,ConditionalTerminationTransition,StrongAbortTransition,ImmediateStrongAbortTransition)
	outgoingEdges (Transition,ImmediateTransition)
}

@disable(resize)
@palette("Dataflow")
node Input {
	style inputStyle("${empty label ? ' ' : label}")
	outgoingEdges (Connection[1,1])
	attr EString as label
}

@disable(resize)
@palette("Dataflow")
node Output {
	style outputStyle("${empty label ? ' ' : label}")
	incomingEdges (Connection[1,1])
	attr EString as label
}

@disable(resize)
@palette("Dataflow")
node Operator {
	style operatorStyle("${empty operator ? ' ' : operator}")
	incomingEdges (Connection)
	outgoingEdges (Connection[1,1])
	attr EString as operator
}

@disable(resize)
@palette("Dataflow")
node CircuitConnecter {
	style connectorStyle
	incomingEdges (Connection)
	outgoingEdges (Connection)
}

/*Transitions */
/*same as auto and count_delayed transition, weak abort for superstates*/
edge AbstractTransition{
	style connectionStyle
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.AbstractTransitionPriorityProvider")
	attr EString as priority := '0'
}

edge Transition extends AbstractTransition{
	style transitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay 
}

edge ImmediateTransition extends AbstractTransition{
	style immediateTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}

/*unconditional Termination */
edge TerminationTransition extends AbstractTransition{
	style terminationTransitionStyle("${(priority == '0' ? ' ' : priority.concat(': ')).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as effect := '<No effect>'
}

edge ConditionalTerminationTransition extends AbstractTransition{
	style conditionalTerminationTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}

/* immediate terminate superstate */
edge StrongAbortTransition extends AbstractTransition{
	style strongAbortTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}

/* immediate terminate superstate */
edge ImmediateStrongAbortTransition extends AbstractTransition{
	style immediateStrongAbortTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}

/* preempt all immediate behavior in target state */
edge DeferredTransition extends AbstractTransition{
	style deferredTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}

edge ImmediateDeferredTransition extends AbstractTransition{
	style immediateDeferredTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}  

edge TerminationDefferdTransition extends AbstractTransition{
	style terminationDeferredTransitionStyle("${(priority == '0' ? ' ' : priority.concat(': ')).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}

edge  ConditionalTerminationDeferredTransition extends AbstractTransition{
	style conditionalTerminationDeferredTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}

edge StrongAbortDeferredTransition extends AbstractTransition{
	style immediateStrongAbortDeferredTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}

edge ImmediateStrongAbortDeferredTransition extends AbstractTransition{
	style strongAbortDeferredTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
}

edge HistoryTransition extends AbstractTransition{
	style historyTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
}

edge ImmediateHistoryTransition extends AbstractTransition{
	style immediateHistoryTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
}

edge TerminationHistoryTransition extends AbstractTransition{
	style terminationHistoryTransitionStyle("${(priority == '0' ? ' ' : priority.concat(': ')).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	//attr EString as priority := '0'
	attr EString as effect := '<No effect>'
	attr EBoolean as deepHistory
}

edge ConditionalTerminationHistoryTransition extends AbstractTransition{
	style conditionalTerminationHistoryTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
}

edge StrongAbortHistoryTransition extends AbstractTransition{
	style strongAbortHistoryTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
} 

edge ImmediateStrongAbortHistoryTransition extends AbstractTransition{
	style immediateStrongAbortHistoryTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	//attr EString as priority := '0'
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
}

edge Connection {
	style connectionStyle
}