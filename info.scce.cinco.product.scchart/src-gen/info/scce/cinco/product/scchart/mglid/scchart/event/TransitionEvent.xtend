// Generated by de.jabc.cinco.meta.plugin.event.generator.template.EventGeneratedClassTemplate

package info.scce.cinco.product.scchart.mglid.scchart.event

import de.jabc.cinco.meta.core.event.hub.Subscriber
import de.jabc.cinco.meta.plugin.event.api.event.EdgeEvent
import de.jabc.cinco.meta.plugin.event.api.payload.PostAttributeChangePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PostCreatePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PostDeletePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PostDoubleClickPayload
import de.jabc.cinco.meta.plugin.event.api.payload.PostReconnectPayload
import de.jabc.cinco.meta.plugin.event.api.payload.PostSelectPayload
import de.jabc.cinco.meta.plugin.event.api.payload.PreAttributeChangePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PreCreateEdgePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PreDeletePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PreDoubleClickPayload
import de.jabc.cinco.meta.plugin.event.api.payload.PreReconnectPayload
import de.jabc.cinco.meta.plugin.event.api.payload.PreSelectPayload
import de.jabc.cinco.meta.plugin.event.api.util.EventApiExtension
import graphmodel.Node
import info.scce.cinco.product.scchart.mglid.scchart.Transition
import java.util.List

abstract class TransitionEvent implements EdgeEvent<Transition> {
	
	protected extension EventApiExtension = new EventApiExtension
	
	var static TransitionEvent eventInstance
	
	var List<Subscriber> subscribers
	
	protected new () {
		// Intentionally left blank
	}
	
	def final static TransitionEvent getInstance() {
		if (eventInstance === null) {
			eventInstance = new info.scce.cinco.product.scchart.events.TransitionEvent
		}
		return eventInstance
	}
	
	override final subscribe() {
		subscribers = #[
			subscribePayloadSubscriber('event.pre.attributeChange.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PreAttributeChangePayload<Transition> payload |
					instance.preAttributeChange(payload)
			],
			subscribePayloadSubscriber('event.pre.create.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PreCreateEdgePayload<Transition> payload |
					instance.preCreate(payload)
			],
			subscribePayloadSubscriber('event.pre.delete.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PreDeletePayload<Transition> payload |
					instance.preDelete(payload)
			],
			subscribePayloadSubscriber('event.pre.doubleClick.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PreDoubleClickPayload<Transition> payload |
					instance.preDoubleClick(payload)
			],
			subscribePayloadSubscriber('event.pre.reconnect.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PreReconnectPayload<Transition> payload |
					instance.preReconnect(payload)
			],
			subscribePayloadSubscriber('event.pre.select.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PreSelectPayload<Transition> payload |
					instance.preSelect(payload)
			],
			subscribePayloadSubscriber('event.post.attributeChange.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PostAttributeChangePayload<Transition> payload |
					instance.postAttributeChange(payload)
			],
			subscribePayloadSubscriber('event.post.create.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PostCreatePayload<Transition> payload |
					instance.postCreate(payload)
			],
			subscribePayloadSubscriber('event.post.delete.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PostDeletePayload<Transition> payload |
					instance.postDelete(payload)
			],
			subscribePayloadSubscriber('event.post.doubleClick.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PostDoubleClickPayload<Transition> payload |
					instance.postDoubleClick(payload)
			],
			subscribePayloadSubscriber('event.post.reconnect.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PostReconnectPayload<Transition> payload |
					instance.postReconnect(payload)
			],
			subscribePayloadSubscriber('event.post.select.info_scce_cinco_product_scchart_mglid_scchart_Transition') [
				PostSelectPayload<Transition> payload |
					instance.postSelect(payload)
			]
		]
	}
	
	override final unsubscribe() {
		subscribers?.forEach [ unsubscribe ]
		subscribers = null
	}
	
	override final preAttributeChange(Transition element, String attribute, Object newValue) {
		// Intentionally left blank
	}
	
	override final preAttributeChange(PreAttributeChangePayload<Transition> it) {
		preAttributeChange(element, attribute, newValue)
	}
	
	override preCreate(Class<? extends Transition> elementClass, Node sourceNode, Node targetNode) {
		// Intentionally left blank
	}
	
	override final preCreate(PreCreateEdgePayload<Transition> it) {
		preCreate(elementClass, sourceNode, targetNode)
	}
	
	override preDelete(Transition element) {
		// Intentionally left blank
	}
	
	override final preDelete(PreDeletePayload<Transition> it) {
		preDelete(element)
	}
	
	override final preDoubleClick(Transition element) {
		// Intentionally left blank
	}
	
	override final preDoubleClick(PreDoubleClickPayload<Transition> it) {
		preDoubleClick(element)
	}
	
	override preReconnect(Transition element, Node newSourceNode, Node newTargetNode) {
		// Intentionally left blank
	}
	
	override final preReconnect(PreReconnectPayload<Transition> it) {
		preReconnect(element, newSourceNode, newTargetNode)
	}
	
	override final preSelect(Transition element) {
		// Intentionally left blank
	}
	
	override final preSelect(PreSelectPayload<Transition> it) {
		preSelect(element)
	}
	
	override postAttributeChange(Transition element, String attribute, Object oldValue) {
		// Intentionally left blank
	}
	
	override final postAttributeChange(PostAttributeChangePayload<Transition> it) {
		postAttributeChange(element, attribute, oldValue)
	}
	
	override postCreate(Transition element) {
		// Intentionally left blank
	}
	
	override final postCreate(PostCreatePayload<Transition> it) {
		postCreate(element)
	}
	
	override postDelete(Transition element) {
		[ /* Intentionally left blank */ ]
	}
	
	override final postDelete(PostDeletePayload<Transition> it) {
		postDelete(element)
	}
	
	override postDoubleClick(Transition element) {
		// Intentionally left blank
	}
	
	override final postDoubleClick(PostDoubleClickPayload<Transition> it) {
		postDoubleClick(element)
	}
	
	override postReconnect(Transition element, Node oldSourceNode, Node oldTargetNode) {
		// Intentionally left blank
	}
	
	override final postReconnect(PostReconnectPayload<Transition> it) {
		postReconnect(element, oldSourceNode, oldTargetNode)
	}
	
	override postSelect(Transition element) {
		// Intentionally left blank
	}
	
	override final postSelect(PostSelectPayload<Transition> it) {
		postSelect(element)
	}
	
}
