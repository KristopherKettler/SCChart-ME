// Generated by de.jabc.cinco.meta.plugin.event.generator.template.EventGeneratedClassTemplate

package info.scce.cinco.product.scchart.mglid.scchart.event

import de.jabc.cinco.meta.core.event.hub.Subscriber
import de.jabc.cinco.meta.plugin.event.api.event.GraphModelEvent
import de.jabc.cinco.meta.plugin.event.api.payload.PostAttributeChangePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PostCreatePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PostSavePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PreAttributeChangePayload
import de.jabc.cinco.meta.plugin.event.api.payload.PreCreateGraphModelPayload
import de.jabc.cinco.meta.plugin.event.api.payload.PreSavePayload
import de.jabc.cinco.meta.plugin.event.api.util.EventApiExtension
import info.scce.cinco.product.scchart.mglid.scchart.SCChart
import java.util.List
import org.eclipse.core.runtime.IPath

abstract class SCChartEvent implements GraphModelEvent<SCChart> {
	
	protected extension EventApiExtension = new EventApiExtension
	
	var static SCChartEvent eventInstance
	
	var List<Subscriber> subscribers
	
	protected new () {
		// Intentionally left blank
	}
	
	def final static SCChartEvent getInstance() {
		if (eventInstance === null) {
			eventInstance = new info.scce.cinco.product.scchart.events.SCChartEvent
		}
		return eventInstance
	}
	
	override final subscribe() {
		subscribers = #[
			subscribePayloadSubscriber('event.pre.attributeChange.info_scce_cinco_product_scchart_mglid_scchart_SCChart') [
				PreAttributeChangePayload<SCChart> payload |
					instance.preAttributeChange(payload)
			],
			subscribePayloadSubscriber('event.pre.create.info_scce_cinco_product_scchart_mglid_scchart_SCChart') [
				PreCreateGraphModelPayload<SCChart> payload |
					instance.preCreate(payload)
			],
			subscribePayloadSubscriber('event.pre.save.info_scce_cinco_product_scchart_mglid_scchart_SCChart') [
				PreSavePayload<SCChart> payload |
					instance.preSave(payload)
			],
			subscribePayloadSubscriber('event.post.attributeChange.info_scce_cinco_product_scchart_mglid_scchart_SCChart') [
				PostAttributeChangePayload<SCChart> payload |
					instance.postAttributeChange(payload)
			],
			subscribePayloadSubscriber('event.post.create.info_scce_cinco_product_scchart_mglid_scchart_SCChart') [
				PostCreatePayload<SCChart> payload |
					instance.postCreate(payload)
			],
			subscribePayloadSubscriber('event.post.save.info_scce_cinco_product_scchart_mglid_scchart_SCChart') [
				PostSavePayload<SCChart> payload |
					instance.postSave(payload)
			]
		]
	}
	
	override final unsubscribe() {
		subscribers?.forEach [ unsubscribe ]
		subscribers = null
	}
	
	override final preAttributeChange(SCChart element, String attribute, Object newValue) {
		// Intentionally left blank
	}
	
	override final preAttributeChange(PreAttributeChangePayload<SCChart> it) {
		preAttributeChange(element, attribute, newValue)
	}
	
	override preCreate(Class<? extends SCChart> elementClass, String name, IPath path) {
		// Intentionally left blank
	}
	
	override final preCreate(PreCreateGraphModelPayload<SCChart> it) {
		preCreate(elementClass, name, path)
	}
	
	override preSave(SCChart element) {
		// Intentionally left blank
	}
	
	override final preSave(PreSavePayload<SCChart> it) {
		preSave(element)
	}
	
	override postAttributeChange(SCChart element, String attribute, Object oldValue) {
		// Intentionally left blank
	}
	
	override final postAttributeChange(PostAttributeChangePayload<SCChart> it) {
		postAttributeChange(element, attribute, oldValue)
	}
	
	override postCreate(SCChart element) {
		// Intentionally left blank
	}
	
	override final postCreate(PostCreatePayload<SCChart> it) {
		postCreate(element)
	}
	
	override postSave(SCChart element) {
		// Intentionally left blank
	}
	
	override final postSave(PostSavePayload<SCChart> it) {
		postSave(element)
	}
	
}
