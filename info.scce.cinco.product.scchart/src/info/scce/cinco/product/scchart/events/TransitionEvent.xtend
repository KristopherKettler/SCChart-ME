// Generated by de.jabc.cinco.meta.plugin.event.generator.template.EventUserClassTemplate

package info.scce.cinco.product.scchart.events

import graphmodel.Node
import info.scce.cinco.product.scchart.mglid.scchart.Transition

/* 
 * About this class:
 * - This is a default implementation for info.scce.cinco.product.scchart.mglid.scchart.event.TransitionEvent.
 * - This class was generated, because you added an "@event" annotation to
 *   Edge "Transition" in "SCChart.mgl".
 * - This file will not be overwritten on future generation processes.
 * 
 * Edit this class:
 * - If you wish Transition to react the same way as its super class AbstractTransition,
 *   you may delete the method or leave it as is (with only the super call).
 * - If you wish to only add functionality, leave the super call in the
 *   corresponding method and add your code to it.
 * - If you wish to break the inheritance chain, remove the super call, but do
 *   not delete the corresponding method. You may leave it empty or write new
 *   code.
 * 
 * Available event methods:
 * - preCreate(Class<? extends Transition> elementClass, Node sourceNode, Node targetNode)
 * - preDelete(Transition element)
 * - preReconnect(Transition element, Node newSourceNode, Node newTargetNode)
 * - postAttributeChange(Transition element, String attribute, Object oldValue)
 * - postCreate(Transition element)
 * - postDelete(Transition element)
 * - postDoubleClick(Transition element)
 * - postReconnect(Transition element, Node oldSourceNode, Node oldTargetNode)
 * - postSelect(Transition element)
 */
final class TransitionEvent extends info.scce.cinco.product.scchart.mglid.scchart.event.TransitionEvent {
	
	override preCreate(Class<? extends Transition> elementClass, Node sourceNode, Node targetNode) {
		// TODO: Auto-generated method stub
		super.preCreate(elementClass, sourceNode, targetNode)
	}
	
	override preDelete(Transition element) {
		// TODO: Auto-generated method stub
		super.preDelete(element)
	}
	
	override preReconnect(Transition element, Node newSourceNode, Node newTargetNode) {
		// TODO: Auto-generated method stub
		super.preReconnect(element, newSourceNode, newTargetNode)
	}
	
	override postAttributeChange(Transition element, String attribute, Object oldValue) {
		// TODO: Auto-generated method stub
		super.postAttributeChange(element, attribute, oldValue)
	}
	
	override postCreate(Transition element) {
		// TODO: Auto-generated method stub
		super.postCreate(element)
	}
	
	override postDelete(Transition element) {
		// TODO: Auto-generated method stub
		// Set up your post delete Runnable here.
		// This will be executed pre delete.
		val superPostDelete = super.postDelete(element)
		return [
			// This is your post delete Runnable.
			// This will be executed post delete.
			superPostDelete.run
		]
	}
	
	override postDoubleClick(Transition element) {
		// TODO: Auto-generated method stub
		super.postDoubleClick(element)
	}
	
	override postReconnect(Transition element, Node oldSourceNode, Node oldTargetNode) {
		// TODO: Auto-generated method stub
		super.postReconnect(element, oldSourceNode, oldTargetNode)
	}
	
	override postSelect(Transition element) {
		// TODO: Auto-generated method stub
		super.postSelect(element)
	}
	
}
