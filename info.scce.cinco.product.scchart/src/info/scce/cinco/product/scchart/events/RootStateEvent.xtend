// Generated by de.jabc.cinco.meta.plugin.event.generator.template.EventUserClassTemplate

package info.scce.cinco.product.scchart.events

import graphmodel.Direction
import graphmodel.ModelElementContainer
import info.scce.cinco.product.scchart.mglid.scchart.RootState
import graphmodel.Edge

/* 
 * About this class:
 * - This is a default implementation for info.scce.cinco.product.scchart.mglid.scchart.event.RootStateEvent.
 * - This class was generated, because you added an "@event" annotation to
 *   Container "RootState" in "SCChart.mgl".
 * - This file will not be overwritten on future generation processes.
 * 
 * Available event methods:
 * - preCreate(Class<? extends RootState> elementClass, ModelElementContainer container, int x, int y, int width, int height)
 * - preDelete(RootState element)
 * - preMove(RootState element, ModelElementContainer newContainer, int newX, int newY)
 * - preResize(RootState element, int newWidth, int newHeight, int newX, int newY, Direction direction)
 * - postAttributeChange(RootState element, String attribute, Object oldValue)
 * - postCreate(RootState element)
 * - postDelete(RootState element)
 * - postDoubleClick(RootState element)
 * - postMove(RootState element, ModelElementContainer oldContainer, int oldX, int oldY)
 * - postResize(RootState element, int oldWidth, int oldHeight, int oldX, int oldY, Direction direction)
 * - postSelect(RootState element)
 */
final class RootStateEvent extends info.scce.cinco.product.scchart.mglid.scchart.event.RootStateEvent {
	
	override preCreate(Class<? extends RootState> elementClass, ModelElementContainer container, int x, int y, int width, int height) {
		// TODO: Auto-generated method stub
	}
	
	override preDelete(RootState element) {
		// TODO: Auto-generated method stub
	}
	
	override preMove(RootState element, ModelElementContainer newContainer, int newX, int newY) {
		// TODO: Auto-generated method stub
	}
	
	override preResize(RootState element, int newWidth, int newHeight, int newX, int newY, Direction direction) {
		// TODO: Auto-generated method stub
	}
	
	override postAttributeChange(RootState element, String attribute, Object oldValue) {
		//must be recoded
		element.rootStateDeclarationNodes.forEach[it.delete]
		element.getDeclaration.forEach[ declaration , index |
			element.newRootStateDeclarationNode(10,30 + 13*index,element.width-20,13)
			element.rootStateDeclarationNodes.last.setInputOutput(declaration.inputOutput)
			element.rootStateDeclarationNodes.last.setDeclarationType(declaration.declarationType)
			element.rootStateDeclarationNodes.last.setName(declaration.name)
		]
		element.getSuspendNodes.forEach[it.delete]
		element.getSuspends.forEach[ suspend , index |
			element.newSuspendNode(10,30 + 13*element.getDeclaration.size+13*index,element.width-20,13)
			element.suspendNodes.last.setSuspendType(suspend.suspendType)
			element.suspendNodes.last.setCondition(suspend.condition)
		]
		
		var boolean break = true
		for(region : element.regions){
			if(region.y<element.getRootStateDeclarationNodes.last.y+13){
				for(region1 : element.regions){
					region1.y = region1.y + 13
				}
				element.height = element.height + 13
			}
		}
//		val regionCount = element.getRegions.size
//		val declarationCount = element.getRootStateDeclarationNodes.size
//		val yZeroPosition = 33 + 13* declarationCount
//		element.regions.forEach[ region , index | 
//			region.x = 10
//			region.y = yZeroPosition + (element.height - yZeroPosition )/regionCount*index
//			region.height = (element.height - yZeroPosition)/regionCount - 10
//			region.width = element.width - 20
//		]
	}
	
	override postCreate(RootState element) {
		element.newRegion(10,30,element.width-20,element.height-40)
	}
	
	override postDelete(RootState element) {
		// TODO: Auto-generated method stub
		// Set up your post delete Runnable here.
		// This will be executed pre delete.
		return [
			// This is your post delete Runnable.
			// This will be executed post delete.
		]
	}
	
	override postDoubleClick(RootState element) {
		// TODO: Auto-generated method stub
	}
	
	override postMove(RootState element, ModelElementContainer oldContainer, int oldX, int oldY) {
		// TODO: Auto-generated method stub
	}
	
	override postResize(RootState element, int oldWidth, int oldHeight, int oldX, int oldY, Direction direction) {
		val float eleOldWidth = oldWidth
		val float eleOldHeight = oldHeight
		val float eleWidth = element.width
		val float eleHeight = element.height
		
		val float proportionWidth = eleWidth/eleOldWidth
		val float proportionHeight = eleHeight/eleOldHeight
		for(region : element.getRegions){
			//region.x = proportionWidth*region.x
			val float regWidth = region.width
			val float regHeight = region.height
			val float width = proportionWidth*regWidth
			val float height = proportionHeight*regHeight	
			region.width = Math.round(width) 
			//region.y = proportionHeight*region.y
			region.height =  Math.round(height) 
		}
		
	}
	
	override postSelect(RootState element) {
		//var l = element.getEdges(Edge)
		// TODO: Auto-generated method stub
	}
	
}
