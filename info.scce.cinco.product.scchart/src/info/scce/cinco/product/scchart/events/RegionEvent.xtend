// Generated by de.jabc.cinco.meta.plugin.event.generator.template.EventUserClassTemplate

package info.scce.cinco.product.scchart.events

import graphmodel.Direction
import graphmodel.ModelElementContainer
import info.scce.cinco.product.scchart.mglid.scchart.Region
import info.scce.cinco.product.scchart.mglid.scchart.SuperState
import java.util.UUID

/* 
 * About this class:
 * - This is a default implementation for info.scce.cinco.product.scchart.mglid.scchart.event.RegionEvent.
 * - This class was generated, because you added an "@event" annotation to
 *   Container "Region" in "SCChart.mgl".
 * - This file will not be overwritten on future generation processes.
 * 
 * Available event methods:
 * - preCreate(Class<? extends Region> elementClass, ModelElementContainer container, int x, int y, int width, int height)
 * - preDelete(Region element)
 * - preMove(Region element, ModelElementContainer newContainer, int newX, int newY)
 * - preResize(Region element, int newWidth, int newHeight, int newX, int newY, Direction direction)
 * - postAttributeChange(Region element, String attribute, Object oldValue)
 * - postCreate(Region element)
 * - postDelete(Region element)
 * - postDoubleClick(Region element)
 * - postMove(Region element, ModelElementContainer oldContainer, int oldX, int oldY)
 * - postResize(Region element, int oldWidth, int oldHeight, int oldX, int oldY, Direction direction)
 * - postSelect(Region element)
 */
final class RegionEvent extends info.scce.cinco.product.scchart.mglid.scchart.event.RegionEvent {
	
	override preCreate(Class<? extends Region> elementClass, ModelElementContainer container, int x, int y, int width, int height) {
		// TODO: Auto-generated method stub
	}
	
	override preDelete(Region element) {
		// TODO: Auto-generated method stub
	}
	
	override preMove(Region element, ModelElementContainer newContainer, int newX, int newY) {
		// TODO: Auto-generated method stub
	}
	
	override preResize(Region element, int newWidth, int newHeight, int newX, int newY, Direction direction) {
		// TODO: Auto-generated method stub
	}
	
	override postAttributeChange(Region element, String attribute, Object oldValue) {
		// TODO: Auto-generated method stub
	}
	
	override postCreate(Region element) {
		element.uuid=UUID.randomUUID.toString 
		var boolean regionFound = false
		for(it : element.rootElement.rootStates.head.regions){
			//searchElement(element.rootElement.rootStates.head,it)
			//check if container contains region
			if(it.uuid==element.uuid){
				regionFound=true
				//manual break
				var break = true
				//if the region is the only one in the container
				if(element.rootElement.rootStates.head.regions.size==1){
					it.x=10
					it.y=33+element.rootElement.rootStates.head.rootStateDeclarations.size*13+element.rootElement.rootStates.head.suspends.size*13
					it.width=element.rootElement.rootStates.head.width-20
					it.height=element.rootElement.rootStates.head.height-43-element.rootElement.rootStates.head.rootStateDeclarations.size*13+element.rootElement.rootStates.head.suspends.size*13
				}
				else {
					for(region1 : element.rootElement.rootStates.head.regions){
						if((it.x-region1.x-region1.width<=13&&it.x-region1.x-region1.width>-3)&&break&&region1.y<it.y&&region1.y+region1.height>it.y &&it.uuid!=region1.uuid){
							region1.width = (region1.width - 10)/2
							it.width = region1.width
							it.height = region1.height
							it.x = region1.x+region1.width+10
							it.y = region1.y
							break = false
						}
						else if((region1.x-it.x<=13&&region1.x-it.x>-3)&&break&&region1.y<it.y&&region1.y+region1.height>it.y &&it.uuid!=region1.uuid){
							region1.width = (region1.width - 10)/2
							it.width = region1.width
							it.height = region1.height
							it.x = region1.x
							it.y = region1.y
							region1.x= region1.x + region1.width+10
							break = false
						}
						else if((it.y-region1.y-region1.height<=13&&it.y-region1.y-region1.height>-1)&&break&&region1.x<it.x&&region1.x+region1.width>it.x &&it.uuid!=region1.uuid){
							region1.height = (region1.height - 10)/2
							it.width = region1.width
							it.height = region1.height
							it.x = region1.x
							it.y = region1.y+region1.height+10
							break = false
						}
						else if((region1.y-it.y<=13&&region1.y-it.y>-1)&&break&&region1.x<it.x&&region1.x+region1.width>it.x &&it.uuid!=region1.uuid){
							region1.height = (region1.height - 10)/2
							it.width = region1.width
							it.height = region1.height
							it.x = region1.x
							it.y = region1.y
							region1.y = region1.y +region1.height+10
							break = false
						}
//						else if(break){
//							it.delete
//							break = false
//						}
					}
					if(break){
						for(region1:element.rootElement.rootStates.head.regions){
							if((it.y-region1.y-region1.height<=13&&it.y-region1.y-region1.height>-1)&&break&&it.uuid!=region1.uuid){
								for(region2: element.rootElement.rootStates.head.regions){
									if(region2.y>it.y-3){
										region2.y = region2.y+160
									}
								}
								element.rootElement.rootStates.head.height = element.rootElement.rootStates.head.height+160
								it.y = region1.y + region1.height+10
								it.x = 10
								it.height = 150
								it.width = element.rootElement.rootStates.head.width-20
								break = false
							}
							else if(break){
								var int declarationCount = 0
								if(element.rootElement.rootStates.head.rootStateDeclarations!==null){
									declarationCount += element.rootElement.rootStates.head.rootStateDeclarations.size
								}
								if(element.rootElement.rootStates.head.suspends!==null){
									declarationCount += element.rootElement.rootStates.head.suspends.size
								}
								if(element.rootElement.rootStates.head.actions!==null){
									declarationCount += element.rootElement.rootStates.head.actions.size
								}
								if(it.y<33+13*declarationCount){
									for(region2: element.rootElement.rootStates.head.regions){
										if(region2.uuid!=it.uuid){
											region2.y = region2.y+160
										}
									}
									element.rootElement.rootStates.head.height = element.rootElement.rootStates.head.height+160
									it.y = 33+13*declarationCount
									it.x = 10
									it.height = 150
									it.width = element.rootElement.rootStates.head.width-20
									break = false
								}
							}
					}
//				element.width = element.rootElement.rootStates.head.width-20
//				element.height = 100
//				element.moveTo(element.rootElement.rootStates.head,10,element.rootElement.rootStates.head.height)
//				element.rootElement.rootStates.head.width = element.rootElement.rootStates.head.width
//				element.rootElement.rootStates.head.height = element.rootElement.rootStates.head.height+110
				}
				}
				
			}
			else{
				if(it.superStates !== null)	{
					for(superState : it.superStates){
						if(superState.regions !== null){
							for(region : superState.regions){
								postCreateInSuperState(superState,element)
							}
						}
					}
				}
			}
		}
		if(!regionFound){
			
		}
	}
	
	def postCreateInSuperState(SuperState superState,Region element){
		// TODO: rekursiv postCreate
	}
	
	override postDelete(Region element) {
		// TODO: Auto-generated method stub
		// Set up your post delete Runnable here.
		// This will be executed pre delete.
		return [
			// This is your post delete Runnable.
			// This will be executed post delete.
		]
	}
	
	override postDoubleClick(Region element) {
		// TODO: Auto-generated method stub
	}
	
	override postMove(Region element, ModelElementContainer oldContainer, int oldX, int oldY) {
		// TODO: Auto-generated method stub
	}
	
	override postResize(Region element, int oldWidth, int oldHeight, int oldX, int oldY, Direction direction) {
		// TODO: Auto-generated method stub
	}
	
	override postSelect(Region element) {
		// TODO: Auto-generated method stub
	}
	
}
