// Generated by de.jabc.cinco.meta.plugin.event.generator.template.EventUserClassTemplate

package info.scce.cinco.product.scchart.events

import graphmodel.Direction
import graphmodel.ModelElementContainer
import info.scce.cinco.product.scchart.mglid.scchart.Declaration
import info.scce.cinco.product.scchart.mglid.scchart.SuperState
import java.util.UUID

/* 
 * About this class:
 * - This is a default implementation for info.scce.cinco.product.scchart.mglid.scchart.event.DeclarationEvent.
 * - This class was generated, because you added an "@event" annotation to
 *   Node "Declaration" in "SCChart.mgl".
 * - This file will not be overwritten on future generation processes.
 * 
 * Available event methods:
 * - preCreate(Class<? extends Declaration> elementClass, ModelElementContainer container, int x, int y, int width, int height)
 * - preDelete(Declaration element)
 * - preMove(Declaration element, ModelElementContainer newContainer, int newX, int newY)
 * - preResize(Declaration element, int newWidth, int newHeight, int newX, int newY, Direction direction)
 * - postAttributeChange(Declaration element, String attribute, Object oldValue)
 * - postCreate(Declaration element)
 * - postDelete(Declaration element)
 * - postDoubleClick(Declaration element)
 * - postMove(Declaration element, ModelElementContainer oldContainer, int oldX, int oldY)
 * - postResize(Declaration element, int oldWidth, int oldHeight, int oldX, int oldY, Direction direction)
 * - postSelect(Declaration element)
 */
final class DeclarationEvent extends info.scce.cinco.product.scchart.mglid.scchart.event.DeclarationEvent {
	
	override postCreate(Declaration element) {
		element.uuid=UUID.randomUUID.toString
		var boolean continue= false
		if(element.rootElement.rootStates.head.declarations!==null){
			for(declaration : element.rootElement.rootStates.head.declarations){
				if(declaration.uuid==element.uuid){
					var int declarationCount = 0
					declarationCount = element.rootElement.rootStates.head.declarations.size
					for(var i = 0; i<element.rootElement.rootStates.head.declarations.size;i++){
						element.rootElement.rootStates.head.declarations.get(i).x=10
						element.rootElement.rootStates.head.declarations.get(i).y=30+13*i
						element.rootElement.rootStates.head.declarations.get(i).width=element.rootElement.rootStates.head.width-20
						element.rootElement.rootStates.head.declarations.get(i).height=13
					}
					if(element.rootElement.rootStates.head.suspends !== null){
						for(suspend : element.rootElement.rootStates.head.suspends){
							suspend.y = suspend.y + 13
						}
						declarationCount+=element.rootElement.getRootStates.head.suspends.size
					}
					if(element.rootElement.rootStates.head.actions !== null){
						for(action : element.rootElement.rootStates.head.actions){
							action.y = action.y + 13
						}
						declarationCount+=element.rootElement.getRootStates.head.actions.size
					}
					if(element.rootElement.rootStates.head.regions!==null){
						for(region : element.rootElement.rootStates.head.regions){
							if(region.y<30+declarationCount*13){
								region.y = region.y + 13
								region.height = region.height - 13

							}
						}
					}
					continue = true
				}
			}
		}
		if(!continue){
			for(region : element.rootElement.rootStates.head.regions){
				if(region.superStates !== null){
					for(superState : region.superStates){
						postCreateDeclaration(superState,element)
					}
				}
			}
		}
	}
	
	def postCreateDeclaration(SuperState superState, Declaration declaration){
		var boolean continue = false
		if(superState.declarations !== null){
			for(declarartionList : superState.declarations){
				if(declarartionList.uuid==declaration.uuid){
					var int declarationCount = 0
					declarationCount = superState.declarations.size
					for(var i = 0; i<superState.declarations.size;i++){
						superState.declarations.get(i).x=10
						superState.declarations.get(i).y=30+13*i
						superState.declarations.get(i).width=superState.width-20
						superState.declarations.get(i).height=13
					}
					if(superState.suspends !== null){
						for(suspend : superState.suspends){
							suspend.y = suspend.y + 13
						}
						declarationCount+=superState.suspends.size
					}
					if(superState.actions !== null){
						for(action : superState.actions){
							action.y = action.y + 13
						}
						declarationCount+=superState.actions.size
					}
					if(superState.regions!==null){
						for(region : superState.regions){
							if(region.y<30+declarationCount*13){
								region.y = region.y + 13
								region.height = region.height - 13
							}
						}
					}
					continue = true
				}
			}
		}
		if(!continue && superState.regions!==null){
			for(region : superState.regions){
				if(region.superStates !== null){
					for(superStateList: region.superStates){
						postCreateDeclaration(superStateList,declaration)
					}
				}
			}
		}
	}
	
	override postDelete(Declaration element) {
		element.uuid=UUID.randomUUID.toString
		var boolean continue= false
		if(element.rootElement.rootStates.head.declarations!==null){
			for(var j = 0; j<element.rootElement.rootStates.head.declarations.size;j++){
				if(element.rootElement.rootStates.head.declarations.get(j).uuid==element.uuid){
					var int declarationCount = 0
					declarationCount = element.rootElement.rootStates.head.declarations.size
					for(var i = j; i<element.rootElement.rootStates.head.declarations.size;i++){
						element.rootElement.rootStates.head.declarations.get(i).y=element.rootElement.rootStates.head.declarations.get(i).y-13
					}
					if(element.rootElement.rootStates.head.suspends !== null){
						for(suspend : element.rootElement.rootStates.head.suspends){
							suspend.y = suspend.y - 13
						}
						declarationCount+=element.rootElement.getRootStates.head.suspends.size
					}
					if(element.rootElement.rootStates.head.actions !== null){
						for(action : element.rootElement.rootStates.head.actions){
							action.y = action.y - 13
						}
						declarationCount+=element.rootElement.getRootStates.head.actions.size
					}
					if(element.rootElement.rootStates.head.regions!==null){
						for(region : element.rootElement.rootStates.head.regions){
							if(region.y==33+declarationCount*13){
								region.y = region.y - 13
								region.height= region.height+13
							}
						}
					}
					continue = true
				}
			}
		}
		if(!continue){
			for(region : element.rootElement.rootStates.head.regions){
				if(region.superStates !== null){
					for(superState : region.superStates){
						postDeleteDeclaration(superState,element)
					}
				}
			}
		}
		// TODO: Auto-generated method stub
		// Set up your post delete Runnable here.
		// This will be executed pre delete.
		return [
			// This is your post delete Runnable.
			// This will be executed post delete.
		]
	}
	
	def postDeleteDeclaration(SuperState superState, Declaration declaration){
		var boolean continue = false
		if(superState.declarations !== null){
			for(var j = 0; j<superState.declarations.size;j++){
				if(superState.declarations.get(j).uuid==declaration.uuid){
					var int declarationCount = 0
					declarationCount = superState.declarations.size
					for(var i = j; i<superState.declarations.size;i++){
						superState.declarations.get(i).y=superState.declarations.get(i).y-13
					}
					if(superState.suspends !== null){
						for(suspend : superState.suspends){
							suspend.y = suspend.y - 13
						}
						declarationCount+=superState.suspends.size
					}
					if(superState.actions !== null){
						for(action : superState.actions){
							action.y = action.y - 13
						}
						declarationCount+=superState.actions.size
					}
					if(superState.regions!==null){
						for(region : superState.regions){
							if(region.y==33+declarationCount*13){
								region.y = region.y - 13
								region.height= region.height+13
							}
						}
					}
					continue = true
				}
			}
		}
		if(!continue && superState.regions!==null){
			for(region : superState.regions){
				if(region.superStates !== null){
					for(superStateList: region.superStates){
						postDeleteDeclaration(superStateList,declaration)
					}
				}
			}
		}
	}
}
