id info.scce.cinco.product.scchart.mglid
stylePath "model/SCChart.style"

@event("info.scce.cinco.product.scchart.events.SCChartEvent")
graphModel SCChart {
	diagramExtension "scchart"
	containableElements(RootState[1,1])
}

@palette("infrastructure")
@event("info.scce.cinco.product.scchart.events.RootStateEvent")
container RootState {
	style rootStateStyle ("${label}")
	containableElements(Region,RootStateDeclarationNode)
	outgoingEdges (*)
	attr EString as label := "<insert name>"
	attr RootStateDeclaration as declaration[0,*]
}

@palette("SuperStates")
@event("info.scce.cinco.product.scchart.events.RegionEvent")
container Region {
	style regionStyle ("${RegionID}")
	containableElements(SuperState,InitilalSuperState[0,1],InitialState[0,1],SimpleState,FinalState,Connector)
	attr EString as label := "<insert name>"
	attr EString as RegionID := "<insert name>"
	@propertiesViewHidden
	attr EString as uuid
}

@palette("Dataflow")
//@event("info.scce.cinco.product.scchart.events.RegionEvent")
container DataFlowRegion extends Region {
	style regionStyle ("${RegionID}")
	containableElements(SuperState,InitilalSuperState[0,1],InitialState[0,1],SimpleState,FinalState,Connector)
}

@palette("SuperStates")
@event("info.scce.cinco.product.scchart.events.SuperStateEvent")
container SuperState {
	style superStateStyle ("${label}")
	containableElements(Region,SuperStateDeclarationNode)
	incomingEdges (*)
	outgoingEdges (*)
	attr SuperStateDeclaration as declaration[0,*]
	attr Suspend as suspends[0,*] 
	attr Action as actions[0,*]
	attr EString as label := "<insert name>"
}

@palette("SuperStates")
@event("info.scce.cinco.product.scchart.events.InitilalSuperStateEvent")
container InitilalSuperState extends SuperState{
	style initialSuperStateStyle ("${label}")
	containableElements(Region,SuperStateDeclarationNode)
	incomingEdges (*)
	outgoingEdges (*)
}

@palette("Declaration")
@disable(select,delete)
node RootStateDeclarationNode {
	style declarationStyle("${InputOutput}", "${declarationType}","${name}")
	attr EString as InputOutput
	attr EString as declarationType
	attr EString as name
}

@palette("Declaration")
@disable(select,delete)
node SuperStateDeclarationNode {
	style subSuperStateDeclarationStyle("${declarationType}","${name}")
	attr EString as declarationType
	attr EString as name
}

@palette("States")
node SimpleState {
	style simpleStateStyle("${label}")
	incomingEdges (*)
	outgoingEdges (*)
	
	attr EString as label := "<insert name>"
}	

@palette("States")
node InitialState extends SimpleState {
	style startNodeStyle("${label}")
	incomingEdges (*)
	outgoingEdges (*)
}							

@palette("States")
node FinalState extends SimpleState {
	style finalStateStyle("${label}")
	incomingEdges (*)
	outgoingEdges (*)
}

node Connector {
	style connectorStyle
	incomingEdges (*)
	outgoingEdges (*)
}

/*Transitions */

/*same as auto and delayed transition */
edge Transition {
	style transitionStyle("asasa")
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.TransitionPriorityProvider")
	attr EString as priority := '0'
	attr EString as condition
	attr EString as effect
	attr EString as delay 
}

edge ImmediateTransition {
	style immediateTransitionStyle("${label}")
	attr EString as priority := '0'
	attr EString as label := "wqwq"
}

edge TerminationTransition {
	style immediateTerminatArrow
}	

edge ConditionalTerminationTransition {
	style weakAbortTerminatArrow
}

edge WeakAbortTransition {
	style weakAbortArrow
}

/* immediate terminate superstate */
edge StrongAbortTransition {
	style strongAbortArrow
}

/* preempt all immediate behavior in target state */
edge DeferredTransition {
	style deferredArrow
}

edge ShallowHistoryTransition {
	style strongAbortArrow
}

edge HistoryTransition {
	style strongAbortArrow
}


@label(name)
type RootStateDeclaration {
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.RootStateDeclarationInputOutputProvider")
	attr EString as InputOutput := "select type"
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.RootStateDeclarationTypeProvider")
	attr EString as declarationType := "select type"
	attr EString as name
}

@label(name)
type SuperStateDeclaration {
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.SuperStateDeclarationTypeProvider")
	attr EString as declarationType := "select type"
	attr EString as name
}

@label(name)
type Suspend {
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.SuperStateDeclarationTypeProvider")
	attr EString as ActionType := "select type"
	attr EString as condition
	attr EString as effect
}

@label(name)
type Action {
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.SuperStateDeclarationTypeProvider")
	attr EString as ActionType := "select type"
	attr EString as condition
	attr EString as effect
}