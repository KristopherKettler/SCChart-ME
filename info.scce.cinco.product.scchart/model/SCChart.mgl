id info.scce.cinco.product.scchart.mglid
stylePath "model/SCChart.style"

@primeviewer
@mcam("check")
@mcam_checkmodule("info.scce.cinco.product.scchart.checks.RootStateCheck")
@mcam_checkmodule("info.scce.cinco.product.scchart.checks.RegionCheck")
@mcam_checkmodule("info.scce.cinco.product.scchart.checks.SuperStateCheck")
@mcam_checkmodule("info.scce.cinco.product.scchart.checks.StateCheck")
@mcam_checkmodule("info.scce.cinco.product.scchart.checks.DeclarationCheck")
@mcam_checkmodule("info.scce.cinco.product.scchart.checks.SuspendCheck")
@mcam_checkmodule("info.scce.cinco.product.scchart.checks.ActionCheck")
@mcam_checkmodule("info.scce.cinco.product.scchart.checks.TransitionCheck")
@generatable("info.scce.cinco.product.scchart.generator.CodeGenerator", "Code")
@event("info.scce.cinco.product.scchart.events.SCChartEvent")
graphModel SCChart {
	diagramExtension "scchart"
	containableElements(RootState[1,1])
}

@palette
@event("info.scce.cinco.product.scchart.events.RootStateEvent")
container RootState {
	style rootStateStyle ("${empty label ? name : label}")
	containableElements(Region,Declaration,Suspend,Action)
	outgoingEdges (*)
	attr EString as name := "<set name>"
	attr EString as label 
}

/* Regions */
@palette("SuperStates")
@event("info.scce.cinco.product.scchart.events.RegionEvent")
@disable(resize,move)
container Region {
	style regionStyle ("${empty label ? (empty name ? '' : name) : label}")
	containableElements(SuperState,InitialSuperState[0,1],InitialState[0,1],SimpleState,FinalState,Connector,FinalSuperState,SCChartReferece,InitialSCChartReferece,FinalSCChartReferece,InitialFinalSuperState,InitialFinalState[0,1])
	attr EString as name
	attr EString as label
	@propertiesViewHidden
	attr EString as uuid
}

//@palette("Dataflow")
//container DataFlowRegion extends Region {
//	style regionStyle ("${empty label ? (empty name ? '' : name) : label}")
//	containableElements(Input,Output,Operator,CircuitConnecter,SCChartReferece)
//}

/* SuperStates */
@palette("SuperStates")
@event("info.scce.cinco.product.scchart.events.SuperStateEvent")
container SuperState {
	style superStateStyle ("${empty label ? name : label}")
	containableElements(Region,Declaration,Action,Suspend)
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition,DeferredHistoryTransition,StrongAbortDeferredHistoryTransition,TerminationDeferredHistoryTransition)
	outgoingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition,DeferredHistoryTransition,StrongAbortDeferredHistoryTransition,TerminationDeferredHistoryTransition)
	attr EString as name := "<set name>"
	attr EString as label
	@propertiesViewHidden
	attr EString as inputsOutputs[0,*]
}

@palette("SuperStates")
container InitialSuperState extends SuperState{
	style initialSuperStateStyle ("${empty label ? name : label}")
	containableElements(Region,Declaration,Action,Suspend)
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition,DeferredHistoryTransition,StrongAbortDeferredHistoryTransition,TerminationDeferredHistoryTransition)
	outgoingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition,DeferredHistoryTransition,StrongAbortDeferredHistoryTransition,TerminationDeferredHistoryTransition)
}

@palette("SuperStates")
container FinalSuperState extends SuperState{
	style finalSuperStateStyle ("${empty label ? name : label}")
	containableElements(Region,Declaration,Action,Suspend)
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition,DeferredHistoryTransition,StrongAbortDeferredHistoryTransition,TerminationDeferredHistoryTransition)
	outgoingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition,DeferredHistoryTransition,StrongAbortDeferredHistoryTransition,TerminationDeferredHistoryTransition)
}

@palette("SuperStates")
container InitialFinalSuperState extends SuperState{
	style initialFinalSuperStateStyle ("${empty label ? name : label}")
	containableElements(Region,Declaration,Action,Suspend)
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition,DeferredHistoryTransition,StrongAbortDeferredHistoryTransition,TerminationDeferredHistoryTransition)
	outgoingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition,DeferredHistoryTransition,StrongAbortDeferredHistoryTransition,TerminationDeferredHistoryTransition)
}

/* Declarations */
@palette("Declaration")
@disable(move,resize)
@event("info.scce.cinco.product.scchart.events.DeclarationEvent")
node Declaration {
	style declarationStyle("${(empty inputOutput || inputOutput == ' ' ? '' : (inputOutput.concat(' '))).concat(empty constant || !constant ? '' : 'const ').concat(empty signal || !signal ? '' : 'signal ').concat(empty declarationType || declarationType == ' ' ? '' : declarationType)}", "${(empty name || name == ' ' ? '' : (name.concat(empty assignment || assignment == ' ' ? '' : (' = '.concat(assignment)))))}")
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.DeclarationInputOutputProvider")
	attr EString as inputOutput := ' '
	attr EBoolean as constant
	attr EBoolean as signal
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.DeclarationTypeProvider")
	attr EString as declarationType := ' '
	attr EString as name := '<set name>'
	attr EString as assignment
	@propertiesViewHidden
	attr EString as uuid
}
 
@palette("Declaration")
@disable(move,resize)
@event("info.scce.cinco.product.scchart.events.SuspendEvent")
node Suspend {
	style declarationStyle("${(suspendType)}", "${(suspendType == '<set suspend>' ? ' ' : empty condition ? ' ' : condition)}")
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.SuspendTypeProvider")
	attr EString as suspendType := '<set suspend>'
	attr EString as condition
	@propertiesViewHidden
	attr EString as uuid
}

@palette("Declaration")
@disable(move,resize)
@event("info.scce.cinco.product.scchart.events.ActionEvent")
node Action {
	style declarationStyle("${actionType}", "${(actionType == '<set action>' ? ' ' : ((empty condition ? '' : condition).concat(empty effect ? '' : ' / '.concat(effect))))}")
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.ActionTypeProvider")
	attr EString as actionType := '<set action>' 
	attr EString as condition
	attr EString as effect
	@propertiesViewHidden
	attr EString as uuid
}

/* States */
@disable(resize)
@palette("States")
node SimpleState {
	style simpleStateStyle("${empty label ? name : label}")
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition)
	outgoingEdges (Transition,DeferredTransition,HistoryTransition)
	attr EString as name := "<set name>"
	attr EString as label 
}	

@disable(resize)
@palette("States")
node InitialState extends SimpleState {
	style initialStateStyle("${empty label ? name : label}")
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition)
	outgoingEdges (Transition,DeferredTransition,HistoryTransition)
	attr EBoolean as initialFinalState
}							

@disable(resize)
@palette("States")
node FinalState extends SimpleState {
	style finalStateStyle("${empty label ? name : label}")
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition)
	outgoingEdges (Transition,DeferredTransition,HistoryTransition)
}

@disable(resize)
@palette("States")
node InitialFinalState extends SimpleState {
	style initialFinalStateStyle("${empty label ? name : label}")
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition)
	outgoingEdges (Transition,DeferredTransition,HistoryTransition)
}

@disable(resize)
@palette("States")
node Connector extends SimpleState{
	style connectorStyle
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition)
	outgoingEdges (Transition,DeferredTransition,HistoryTransition)
}

/* Dataflow */
//@disable(resize)
//@palette("Dataflow ")
//node Input {
//	style inputStyle("${empty label ? ' ' : label}")
//	outgoingEdges (Connection[1,1])
//	attr EString as label
//}
//
//@disable(resize)
//@palette("Dataflow")
//node Output {
//	style outputStyle("${empty label ? ' ' : label}")
//	incomingEdges (Connection[1,1])
//	attr EString as label
//}
//
//@disable(resize)
//@palette("Dataflow")
//node Operator {
//	style operatorStyle("${empty operator ? ' ' : operator}")
//	incomingEdges (Connection)
//	outgoingEdges (Connection[1,1])
//	attr EString as operator
//}
//
//@disable(resize)
//@palette("Dataflow")
//node CircuitConnecter {
//	style connectorStyle
//	incomingEdges (Connection)
//	outgoingEdges (Connection)
//}

/* SCChart References */
@event("info.scce.cinco.product.scchart.events.SCChartRefereceEvent")
container SCChartReferece{
	style sCChartRefereceStyle("${empty label ? name : label} @ ${reference.name} ${assignments}")
	containableElements(*)
	incomingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition)
	outgoingEdges (Transition,TerminationTransition,StrongAbortTransition,DeferredTransition,TerminationDeferredTransition,StrongAbortDeferredTransition,HistoryTransition,TerminationHistoryTransition,StrongAbortHistoryTransition)
	@pvFileExtension("scchart")   
	@pvLabel(name)
	prime this::RootState as reference
	attr EString as inputsOutputs
	attr EString as name := "<set name>"
	@propertiesViewHidden
	attr EString as uuid
	attr EString as assignments
	attr EString as label
}

container InitialSCChartReferece extends SCChartReferece{
	style initialSCChartRefereceStyle("${empty label ? name : label} @ ${reference.name}")
	containableElements(*)
	@pvFileExtension("scchart")   
	@pvLabel(name)
	prime this::RootState as reference
}

container FinalSCChartReferece extends SCChartReferece{
	style finalSCChartRefereceStyle("${empty label ? name : label} @ ${reference.name}")
	containableElements(*)
	@pvFileExtension("scchart")   
	@pvLabel(name)
	prime this::RootState as reference
}

/*Transitions */
/*same as auto and count_delayed transition, weak abort for superstates*/
edge AbstractTransition{
	style connectionStyle
	@possibleValuesProvider("info.scce.cinco.product.scchart.provider.AbstractTransitionPriorityProvider")
	attr EString as priority := '0'
}

@event("info.scce.cinco.product.scchart.events.TransitionEvent")
edge Transition extends AbstractTransition{
	style transitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay 
	attr EBoolean as immediate
}

edge TerminationTransition extends AbstractTransition{
	style terminationTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as immediate
}

/* immediate terminate superstate */
edge StrongAbortTransition extends AbstractTransition{
	style strongAbortTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as immediate
}

/* preempt all immediate behavior in target state */
edge DeferredTransition extends AbstractTransition{
	style deferredTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as immediate
}

edge HistoryTransition extends AbstractTransition{
	style historyTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
	attr EBoolean as immediate
}

edge TerminationDeferredTransition extends AbstractTransition{
	style conditionalTerminationDeferredTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as immediate
}

edge StrongAbortDeferredTransition extends AbstractTransition{
	style immediateStrongAbortDeferredTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as immediate
}

edge TerminationHistoryTransition extends AbstractTransition{
	style terminationHistoryTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
	attr EBoolean as immediate
}

edge StrongAbortHistoryTransition extends AbstractTransition{
	style strongAbortHistoryTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
	attr EBoolean as immediate
} 

edge DeferredHistoryTransition extends AbstractTransition{
	style strongAbortHistoryTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
	attr EBoolean as immediate
} 

edge StrongAbortDeferredHistoryTransition extends AbstractTransition{
	style strongAbortHistoryTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
	attr EBoolean as immediate
} 

edge TerminationDeferredHistoryTransition extends AbstractTransition{
	style strongAbortHistoryTransitionStyle("${(priority == '0' ? '' : priority.concat(': ')).concat(condition == '<No condition>' || empty condition ? '' : (empty count_delay ? '' : count_delay.concat(' ')).concat(condition)).concat(effect == '<No effect>' ? '' : ' / '.concat(effect))}","${deepHistory ? '*' : ' '}")
	attr EString as condition := '<No condition>'
	attr EString as effect := '<No effect>'
	attr EString as count_delay
	attr EBoolean as deepHistory
	attr EBoolean as immediate
} 

//edge Connection {
//	style connectionStyle
//}
